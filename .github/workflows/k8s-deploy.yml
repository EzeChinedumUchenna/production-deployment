# name: Deploy FastAPI App

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - k8s/**        # Pipleine trigger if anything under /k8s changes,
#       - .github/workflows/k8s-deploy.yml
#       - security/rbac.yml
#   pull_request:
#     paths:
#       - k8s/**
#       - .github/workflows/deploy.yml
#       - security/rbac.yml

# env:
#   DOCKER_IMAGE: nedumdocker/fastapi-app
#   K8S_NAMESPACE: prod
#   VM_PUBLIC_IP: 172.191.135.200
#   file_path: ~/k8s/
  
#   file:
#     - configmap.yml
#     - hpa.yml

# jobs:
#   checkout-build-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to DockerHub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
    
#       - name: Build and push staging image
#         run: |
#           docker builder prune --all --force
#           docker build --no-cache -t ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} -t ${{ env.DOCKER_IMAGE }}:latest .
          
#           docker push ${{ env.DOCKER_IMAGE }}:${{ github.run_number }}
#           docker push ${{ env.DOCKER_IMAGE }}:latest

#   deploy-to-k8s:
#     needs: checkout-build-push
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2

#       - name: List files to copy
#         run: |
#           ls -al
#           ls -la ./k8s || echo "k8s folder missing"
#           ls -la ./security || echo "security folder missing"

#       - name: Copy k8s manifests to VM
#         uses: appleboy/scp-action@v0.1.3
#         with:
#           host: ${{ env.VM_PUBLIC_IP }}
#           username: minikubeadmin
#           key: ${{ secrets.AZURE_PRIVATE_KEY }}
#           source: "k8s"
#           target: "~/"

#       - name: Copy k8s security into the VM
#         uses: appleboy/scp-action@v0.1.3
#         with:
#           host: ${{ env.VM_PUBLIC_IP }}
#           username: minikubeadmin
#           key: ${{ secrets.AZURE_PRIVATE_KEY }}
#           source: "security/*"
#           target: "~/k8s/"
#           strip_components: 1
    
#       - name: Install kubectl
#         uses: azure/setup-kubectl@v1

#       - name: Determine changed files
#         id: changed
#         run: |
#           git fetch origin main --depth=2
#           echo "changed=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})" >> $GITHUB_OUTPUT
      
#       - name: Deploy to Minikube on Azure VM
#         uses: appleboy/ssh-action@v1.0.0
#         with:
#           host: ${{ env.VM_PUBLIC_IP }}
#           username: minikubeadmin
#           key: ${{ secrets.AZURE_PRIVATE_KEY }}
#           run: |
#             for file in $(echo $file_path | tr ',' '\n'); do
#               kubectl apply -f ~/k8s/$file -n ${{ env.K8S_NAMESPACE }}
#               kubectl rollout status deployment/fastapi-app -n ${{ env.K8S_NAMESPACE }}
#             done

#           # script: | 
#           #   kubectl apply -f ${{ env.file_path }}} -n ${{ env.K8S_NAMESPACE }}
#           #   kubectl rollout status deployment/fastapi-app -n ${{ env.K8S_NAMESPACE }}

#           #   echo "Listing services in ingress-nginx namespace:"
#           #   kubectl get svc -n ingress-nginx

            


name: Deploy FastAPI App

on:
  push:
    branches:
      - main
    paths:
      - k8s/**
      - .github/workflows/k8s-deploy.yml
      - security/rbac.yml
  pull_request:
    paths:
      - k8s/**
      - .github/workflows/k8s-deploy.yml
      - security/rbac.yml

env:
  DOCKER_IMAGE: nedumdocker/fastapi-app
  K8S_NAMESPACE: prod
  VM_PUBLIC_IP: 172.191.135.200
  FILES_TO_DEPLOY: "namespace.yml networkpolicy.yml serviceaccount.yml configmap.yml secret.yml hpa.yml service.yml ingress.yml deployment.yml"  # Space-separated list

jobs:
  checkout-build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image
        run: |
          docker builder prune --all --force
          docker build --no-cache -t ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} -t ${{ env.DOCKER_IMAGE }}:latest .
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.run_number }}
          docker push ${{ env.DOCKER_IMAGE }}:latest

  deploy-to-k8s:
    needs: checkout-build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: List files to copy
        run: |
          ls -al
          ls -la ./k8s || echo "k8s folder missing"
          ls -la ./security || echo "security folder missing"

      - name: Copy k8s manifests to VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.VM_PUBLIC_IP }}
          username: minikubeadmin
          key: ${{ secrets.AZURE_PRIVATE_KEY }}
          source: "k8s"
          target: "~"

      - name: Copy security manifests into the VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.VM_PUBLIC_IP }}
          username: minikubeadmin
          key: ${{ secrets.AZURE_PRIVATE_KEY }}
          source: "security/*"
          target: "~/k8s/"
          strip_components: 1

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Deploy to Minikube on Azure VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_PUBLIC_IP }}
          username: minikubeadmin
          key: ${{ secrets.AZURE_PRIVATE_KEY }}
          run: |

            echo "Starting deployment to Kubernetes..."

            for file in ${{ env.FILES_TO_DEPLOY }}; do
              echo "Applying file: ~/k8s/$file"
              if [ ! -f ~/k8s/$file ]; then
                echo "ERROR: File ~/k8s/$file not found!"
                exit 1
              fi

              kubectl apply -f ~/k8s/$file -n ${{ env.K8S_NAMESPACE }}
              echo "âœ… Successfully applied $file"
            done

            echo "Waiting for rollout of deployment/fastapi-app..."
            kubectl rollout status deployment/fastapi-app -n ${{ env.K8S_NAMESPACE }}
